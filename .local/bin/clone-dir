#!/bin/env python
import subprocess
import sys
import os

def execute_command(command, working_directory=None):
    """Executes a shell command and handles potential errors."""
    try:
        process = subprocess.run(
            command,
            check=True,
            shell=True,
            cwd=working_directory,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True,
        )
        return process.stdout.strip()
    except subprocess.CalledProcessError as e:
        print(f"Error executing command: {e}")
        print(f"Stdout: {e.stdout}")
        print(f"Stderr: {e.stderr}")
        sys.exit(1)

def get_default_branch(repo_url):
    """Retrieves the default branch of a remote Git repository."""
    command = f"git ls-remote --symref {repo_url} HEAD"
    output = execute_command(command)
    return output.split('\n')[0].split('\t')[0].replace('ref: refs/heads/', '')
    

def clone_folder(repo_url, folder_path):
    """Clones a specific folder from a Git repository."""
    # Extract repository name and folder details
    try:
        base_url, _, repo_name, _, branch, *folder_parts = folder_path.split("/")
        repo_name = repo_name.split(".git")[0] if repo_name.endswith(".git") else repo_name
        folder_name = folder_parts[-1]
        full_folder_path = "/".join(folder_parts)
        repo_url = f"{base_url}/{repo_name}"
    except ValueError:
        print(
            "Invalid folder path format. Use: 'https://github.com/user/repo/tree/branch/folder/subfolder'"
        )
        sys.exit(1)

    # Get default branch if not specified
    if not branch:
        branch = get_default_branch(repo_url)

    # Local directory setup
    local_dir = folder_name

    # Git operations
    execute_command(f"git init --initial-branch={branch} {local_dir}")
    execute_command(f"git remote add origin {repo_url}", local_dir)
    execute_command("git config core.sparseCheckout true", local_dir)

    # Sparse checkout setup
    sparse_checkout_file = os.path.join(local_dir, ".git/info/sparse-checkout")
    with open(sparse_checkout_file, "w") as f:
        f.write(f"{full_folder_path}\n")

    execute_command(f"git pull origin {branch} --depth=1", local_dir)
    print(f"Folder '{full_folder_path}' from branch '{branch}' cloned successfully into '{local_dir}'.")

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python script.py <folder_url>")
        sys.exit(1)

    folder_url = sys.argv[1]
    clone_folder(folder_url.split('/tree/')[0], folder_url)
